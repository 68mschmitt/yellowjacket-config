/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF_L 0
#define NUM_L 1
#define MOUS_L 2
#define ARR_L 3
#define FUNC_L 4
#define SYS_L 5
#define BR_L 6

#define B0     BT_SEL 0
#define B1     BT_SEL 1
#define B2     BT_SEL 2
#define B3     BT_SEL 3
#define B4     BT_SEL 4
#define OTGL   out OUT_TOG

// Number layer LT
#define SP_LT &lt NUM_L SPACE

// Mouse layer LT
#define MS_LT &lt MOUS_L BSPC

// Arrow layer LT
#define AR_LT &lt ARR_L ENTER

// Function layer LT
#define FNC_LT &lt FUNC_L Z

// Bluetooth layer LT
#define SYS_LT &lt SYS_L A

// Brackets layer LT
#define BR_LT &lt BR_L TAB

// Home row mods
// Left hand
#define HR_G_L &ht_tp LGUI A
#define HR_A_L &ht_tp LALT R
#define HR_S_L &ht_tp LCTRL S
#define HR_T_L &ht_tp LSHIFT T

// Right hand
#define HR_G_R &ht_tp RGUI O
#define HR_A_R &ht_tp RALT I
#define HR_S_R &ht_tp RCTRL E
#define HR_T_R &ht_tp RSHIFT N

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&sk {
  release-after-ms = <60000>;
};

/ {
    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
          combo_##NAME { \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
          };
        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │      0   1   2   3 | |  4   5   6   7     │
          │  8   9  10  11  12 │ │ 13  14  15  16  17 │
          │ 18  19  20  21  22 │ │ 23  24  25  26  27 │
          ╰───────────╮ 28  29 │ │ 30  31 ╭───────────╯
                      ╰────────╯ ╰────────╯            */
        // Letters
        COMBO(lower_q, &kp Q, 0 1, DEF_L)

        // Colons
        COMBO(colon,     &kp COLON, 6 7, DEF_L)
        COMBO(semicolon, &kp SEMI, 24 25, DEF_L)

        // Escape Keys
        COMBO(left_esc,  &kp ESC, 10 11, DEF_L)
        COMBO(right_esc, &kp ESC, 14 15, DEF_L)

        // Quick numbers
        COMBO(q_0, &kp N0, 31 27, DEF_L)
        COMBO(q_1, &kp N1, 24 31, DEF_L)
        COMBO(q_2, &kp N2, 25 31, DEF_L)
        COMBO(q_3, &kp N3, 26 31, DEF_L)
        COMBO(q_4, &kp N4, 14 31, DEF_L)
        COMBO(q_5, &kp N5, 15 31, DEF_L)
        COMBO(q_6, &kp N6, 16 31, DEF_L)
        COMBO(q_7, &kp N7,  5 31, DEF_L)
        COMBO(q_8, &kp N8,  6 31, DEF_L)
        COMBO(q_9, &kp N9,  7 31, DEF_L)

        // Quick special characters
        COMBO(q_1_sp, &kp EXCLAMATION, 24 31, DEF_L)
        COMBO(q_2_sp, &kp AT_SIGN,     25 31, DEF_L)
        COMBO(q_3_sp, &kp POUND,       26 31, DEF_L)
        COMBO(q_4_sp, &kp DOLLAR,      14 31, DEF_L)
        COMBO(q_5_sp, &kp PERCENT,     15 31, DEF_L)
        COMBO(q_6_sp, &kp CARET,       16 31, DEF_L)
        COMBO(q_7_sp, &kp AMPERSAND,    5 31, DEF_L)
        COMBO(q_8_sp, &kp ASTERISK,     6 31, DEF_L)
        COMBO(q_9_sp, &kp LPAR,         7 31, DEF_L)

        // Backslash && Pipe
        COMBO(q_backslash, &kp BACKSLASH, 30 27, DEF_L)
        COMBO(q_pipe, &kp PIPE, 30 23, DEF_L)

        // Operators
        COMBO(q_equals, &kp EQUAL, 30 31, DEF_L)
        COMBO(q_plus,   &kp PLUS,   4 31, DEF_L)

        COMBO(q_dash,       &kp MINUS,      30 13, DEF_L)
        COMBO(q_underscore, &kp UNDERSCORE, 31 13, DEF_L)

        COMBO(q_quote_r,      &kp DOUBLE_QUOTES, 4 30, DEF_L)
        COMBO(q_quote_l,      &kp DOUBLE_QUOTES, 3 29, DEF_L)
        COMBO(q_single_quote, &kp SINGLE_QUOTE, 12 29, DEF_L)
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                           &kp W         &kp F         &kp P         &kp B             &kp J         &kp L         &kp U         &kp Y
             HR_G_L        HR_A_L        HR_C_L        HR_S_L        &kp G             &kp M         HR_S_R        HR_C_R        HR_A_R        HR_G_R
             FNC_LT        SYS_LT        &kp C         &kp D         &kp V             &kp K         &kp H         &kp COMMA     &kp DOT       &kp FSLH
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       SP_LT         SP_LT             MS_LT         AR_LT
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                             &trans        &trans        &trans        &trans              &trans         &kp N7        &kp N8        &kp N9
               &trans        &trans        &trans        &trans        &trans              &trans         &kp N6        &kp N5        &kp N4        &trans
               &trans        &trans        &trans        &trans        &trans              &trans         &kp N1        &kp N2        &kp N3        &trans
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                         &trans        &trans              &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };
        
        mouse_layer {
            label = "Mouse";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                             &trans        &trans        &trans        &trans              &trans         &trans        &trans        &trans
               &trans        &trans        &trans        &trans        &trans              &trans         &trans        &trans        &trans        &trans
               &trans        &trans        &trans        &trans        &trans              &trans         &trans        &trans        &trans        &trans
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                         &trans        &trans              &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        arrow_layer {
            label = "Arrows";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                             &trans        &trans        &trans        &trans              &trans         &kp N7        &kp N8        &kp N9
               &trans        &trans        &trans        &trans        &trans              &trans         &kp N6        &kp N5        &kp N4        &trans
               &trans        &trans        &trans        &trans        &trans              &trans         &kp N1        &kp N2        &kp N3        &kp DOT
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                         &trans        &trans              &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        function_layer {
            label = "Functions";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                             &kp F9        &kp F10       &kp F11       &kp F12             &trans         &trans        &trans        &trans
               &trans        &kp F5        &kp F6        &kp F7        &kp F8              &trans         &trans        &trans        &trans        &trans
               &trans        &kp F1        &kp F2        &kp F3        &kp F4              &trans         &trans        &trans        &trans        &trans
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                         &trans        &trans              &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };
        
        sys_layer {
            label = "Sys";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                           &OTGL         &none         &none         &none             &none         &kp F9        &kp F10       &kp F11
             &bt B0        &none         &bt B1        &bt B2        &none             &none         &kp F1        &kp F2        &kp F3        &kp F4 
             &bt B3        &none         &bt B4        &none         &none             &none         &kp F5        &kp F6        &kp F7        &kp F8 
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &none         &none             &none         &none
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        bra_layer {
            label = "Brackets";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                             &trans        &trans        &trans        &trans              &trans         &trans        &trans        &trans
               &trans        &trans        &trans        &trans        &trans              &trans         &trans        &trans        &trans        &trans
               &trans        &trans        &trans        &trans        &trans              &trans         &trans        &trans        &trans        &trans
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                         &trans        &trans              &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

    };
};

/*
        _layer {
            label = "";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                           &none         &none         &none         &none             &none         &kp F9        &kp F10       &kp F11
             &none         &none         &none         &none         &none             &none         &kp F1        &kp F2        &kp F3        &kp F4 
             &none         &none         &none         &none         &none             &none         &kp F5        &kp F6        &kp F7        &kp F8 
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &none         &none             &none         &none
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };
*/
